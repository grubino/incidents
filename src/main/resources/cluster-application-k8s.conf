include "cluster-application-base.conf"

akka {

  remote {
    artery {
      canonical.port = 2552
    }
  }

  #discovery-config
  discovery {
    kubernetes-api {
      pod-namespace = "incidents"
      pod-port-name="management"
      pod-label-selector = "app=%s"
    }
  }
  #discovery-config

  #management-config
  management {
    cluster.bootstrap {
      contact-point-discovery {
        # For the kubernetes API this value is substributed into the %s in pod-label-selector
        service-name = ${AKKA_CLUSTER_BOOTSTRAP_SERVICE_NAME}
        port-name = "management"
        # pick the discovery method you'd like to use:
        discovery-method = kubernetes-api
      }
    }
    http {
      hostname = ${HOSTNAME}
      port = 8558
      bind-hostname = 0.0.0.0
      bind-port = 8558
      base-path = "incidents"
    }
  }
  #management-config

  cluster {
    roles=["k8s"]
    shutdown-after-unsuccessful-join-seed-nodes = 40s
  }

  coordinated-shutdown.exit-jvm = on

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
    cassandra {
      journal {
        # to create the schema
        keyspace-autocreate = true
        tables-autocreate = true
      }

      snapshot {
        # to create the schema
        keyspace-autocreate = true
        tables-autocreate = true
      }

      query {
        refresh-interval = 2s
      }

      events-by-tag {
        # for lower latency
        eventual-consistency-delay = 25ms
        flush-interval = 25ms
        pubsub-notification = on
      }
    }
  }

}

clustering {
  cassandra.contactpoint1 = ${?CASSANDRA_CONTACT_POINT1}
  ip = ""
  port = 2552
  defaultPort = ${clustering.port}
}

cassandra-journal {
  contact-points = [${clustering.cassandra.contactpoint1}]
}
cassandra-snapshot-store {
  contact-points = [${clustering.cassandra.contactpoint1}]
}
