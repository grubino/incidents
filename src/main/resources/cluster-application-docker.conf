include "cluster-application-base.conf"

akka {
  remote {
    artery {
      canonical.hostname = ${clustering.ip}
      canonical.port = ${clustering.port}
    }
  }

  cluster {
    roles=["docker"]
    seed-nodes = [
#      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
      # artery protocol
      "akka://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
    shutdown-after-unsuccessful-join-seed-nodes = 40s
  }

  coordinated-shutdown.exit-jvm = on

  persistence {
    cassandra {
      journal {
        # to create the schema
        keyspace-autocreate = true
        tables-autocreate = true
      }

      snapshot {
        # to create the schema
        keyspace-autocreate = true
        tables-autocreate = true
      }

      query {
        refresh-interval = 2s
      }

      events-by-tag {
        # for lower latency
        eventual-consistency-delay = 25ms
        flush-interval = 25ms
        pubsub-notification = on
      }
    }
    journal {
      plugin = "cassandra-journal"
      auto-start-journals = ["akka.persistence.cassandra.journal"]
    }
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

}

clustering {
  ip = "127.0.0.1"
  ip = ${?CLUSTER_IP}
  port = 1600
  defaultPort = 0

  seed-ip = "127.0.0.1"
  seed-ip = ${?CLUSTER_IP}
  seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
  seed-port = 1600
  seed-port = ${?SEED_PORT_1600_TCP_PORT}
  cluster.name = incidents
  cassandra.contactpoint1 = ${?CASSANDRA_CONTACT_POINT1}
}

cassandra-journal {
  contact-points = [${clustering.cassandra.contactpoint1}]
}
cassandra-snapshot-store {
  contact-points = [${clustering.cassandra.contactpoint1}]
}
